// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	tls "crypto/tls"
	entities "github.com/lugondev/wallet-signer-manager/src/auth/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AuthenticateJWT mocks base method
func (m *MockAuthenticator) AuthenticateJWT(ctx context.Context, token string) (*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateJWT", ctx, token)
	ret0, _ := ret[0].(*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateJWT indicates an expected call of AuthenticateJWT
func (mr *MockAuthenticatorMockRecorder) AuthenticateJWT(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateJWT", reflect.TypeOf((*MockAuthenticator)(nil).AuthenticateJWT), ctx, token)
}

// AuthenticateAPIKey mocks base method
func (m *MockAuthenticator) AuthenticateAPIKey(ctx context.Context, apiKey []byte) (*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateAPIKey indicates an expected call of AuthenticateAPIKey
func (mr *MockAuthenticatorMockRecorder) AuthenticateAPIKey(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateAPIKey", reflect.TypeOf((*MockAuthenticator)(nil).AuthenticateAPIKey), ctx, apiKey)
}

// AuthenticateTLS mocks base method
func (m *MockAuthenticator) AuthenticateTLS(ctx context.Context, connState *tls.ConnectionState) (*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateTLS", ctx, connState)
	ret0, _ := ret[0].(*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateTLS indicates an expected call of AuthenticateTLS
func (mr *MockAuthenticatorMockRecorder) AuthenticateTLS(ctx, connState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateTLS", reflect.TypeOf((*MockAuthenticator)(nil).AuthenticateTLS), ctx, connState)
}

// MockAuthorizator is a mock of Authorizator interface
type MockAuthorizator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizatorMockRecorder
}

// MockAuthorizatorMockRecorder is the mock recorder for MockAuthorizator
type MockAuthorizatorMockRecorder struct {
	mock *MockAuthorizator
}

// NewMockAuthorizator creates a new mock instance
func NewMockAuthorizator(ctrl *gomock.Controller) *MockAuthorizator {
	mock := &MockAuthorizator{ctrl: ctrl}
	mock.recorder = &MockAuthorizatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizator) EXPECT() *MockAuthorizatorMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method
func (m *MockAuthorizator) CheckPermission(ops ...*entities.Operation) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ops {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPermission", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPermission indicates an expected call of CheckPermission
func (mr *MockAuthorizatorMockRecorder) CheckPermission(ops ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockAuthorizator)(nil).CheckPermission), ops...)
}

// CheckAccess mocks base method
func (m *MockAuthorizator) CheckAccess(allowedTenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", allowedTenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAccess indicates an expected call of CheckAccess
func (mr *MockAuthorizatorMockRecorder) CheckAccess(allowedTenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockAuthorizator)(nil).CheckAccess), allowedTenants)
}

// MockRoles is a mock of Roles interface
type MockRoles struct {
	ctrl     *gomock.Controller
	recorder *MockRolesMockRecorder
}

// MockRolesMockRecorder is the mock recorder for MockRoles
type MockRolesMockRecorder struct {
	mock *MockRoles
}

// NewMockRoles creates a new mock instance
func NewMockRoles(ctrl *gomock.Controller) *MockRoles {
	mock := &MockRoles{ctrl: ctrl}
	mock.recorder = &MockRolesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoles) EXPECT() *MockRolesMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRoles) Create(ctx context.Context, name string, permissions []entities.Permission, userInfo *entities.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, permissions, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRolesMockRecorder) Create(ctx, name, permissions, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoles)(nil).Create), ctx, name, permissions, userInfo)
}

// Get mocks base method
func (m *MockRoles) Get(ctx context.Context, name string, userInfo *entities.UserInfo) (*entities.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, userInfo)
	ret0, _ := ret[0].(*entities.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRolesMockRecorder) Get(ctx, name, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoles)(nil).Get), ctx, name, userInfo)
}

// List mocks base method
func (m *MockRoles) List(ctx context.Context, userInfo *entities.UserInfo) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userInfo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRolesMockRecorder) List(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoles)(nil).List), ctx, userInfo)
}

// UserPermissions mocks base method
func (m *MockRoles) UserPermissions(ctx context.Context, userInfo *entities.UserInfo) []entities.Permission {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissions", ctx, userInfo)
	ret0, _ := ret[0].([]entities.Permission)
	return ret0
}

// UserPermissions indicates an expected call of UserPermissions
func (mr *MockRolesMockRecorder) UserPermissions(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissions", reflect.TypeOf((*MockRoles)(nil).UserPermissions), ctx, userInfo)
}
