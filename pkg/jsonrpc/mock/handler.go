// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	jsonrpc "github.com/lugondev/wallet-signer-manager/pkg/jsonrpc"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ServeRPC mock base method.
func (m *MockHandler) ServeRPC(arg0 jsonrpc.ResponseWriter, arg1 *jsonrpc.RequestMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeRPC", arg0, arg1)
}

// ServeRPC indicates an expected call of ServeRPC.
func (mr *MockHandlerMockRecorder) ServeRPC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeRPC", reflect.TypeOf((*MockHandler)(nil).ServeRPC), arg0, arg1)
}
