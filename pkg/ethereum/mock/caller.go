// Code generated by MockGen. DO NOT EDIT.
// Source: caller.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	ethereum "github.com/lugondev/signer-key-manager/pkg/ethereum"
	gomock "github.com/golang/mock/gomock"
)

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// EEA mock base method.
func (m *MockCaller) EEA() ethereum.EEACaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EEA")
	ret0, _ := ret[0].(ethereum.EEACaller)
	return ret0
}

// EEA indicates an expected call of EEA.
func (mr *MockCallerMockRecorder) EEA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EEA", reflect.TypeOf((*MockCaller)(nil).EEA))
}

// Eth mock base method.
func (m *MockCaller) Eth() ethereum.EthCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eth")
	ret0, _ := ret[0].(ethereum.EthCaller)
	return ret0
}

// Eth indicates an expected call of Eth.
func (mr *MockCallerMockRecorder) Eth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eth", reflect.TypeOf((*MockCaller)(nil).Eth))
}

// Priv mock base method.
func (m *MockCaller) Priv() ethereum.PrivCaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priv")
	ret0, _ := ret[0].(ethereum.PrivCaller)
	return ret0
}

// Priv indicates an expected call of Priv.
func (mr *MockCallerMockRecorder) Priv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priv", reflect.TypeOf((*MockCaller)(nil).Priv))
}
